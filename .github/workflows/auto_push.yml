name: Auto NSFW Push

on:
  schedule:
    # 每两小时执行一次
    - cron: "0 */2 * * *"
  workflow_dispatch:

jobs:
  push-nsfw:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run NSFW Push Task
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHANNEL_USERNAME: ${{ secrets.CHANNEL_USERNAME }}
        run: |
          echo "== Running NSFW Push Task =="
          echo "BOT_TOKEN length: ${BOT_TOKEN.length}"
          echo "CHANNEL_USERNAME: $CHANNEL_USERNAME"
          python - <<EOF
import os
import logging
from telegram import Bot
from telegram.error import InvalidToken

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_USERNAME", "").strip()

logging.info(f"[DEBUG] BOT_TOKEN length: {len(TOKEN)}")
logging.info(f"[DEBUG] CHANNEL_ID: {CHANNEL_ID}")

if not TOKEN or len(TOKEN.split(":")) != 2:
    logging.error("❌ Invalid BOT_TOKEN format.")
    raise InvalidToken("Invalid BOT_TOKEN format.")

bot = Bot(token=TOKEN)

try:
    # 测试发送一条消息，验证连接
    bot.send_message(chat_id=CHANNEL_ID, text="✅ NSFW Push Task 测试消息")
    logging.info("✅ 测试消息发送成功")
except Exception as e:
    logging.error(f"❌ 发送测试消息失败: {e}")
    raise e
EOF
